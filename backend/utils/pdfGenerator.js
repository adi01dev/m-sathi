
const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');

/**
 * Generate a PDF report for the user
 * @param {Object} data Report data including user info, mood entries, etc.
 * @returns {Promise<Buffer>} PDF buffer
 */
exports.generatePDF = async (data) => {
  const { userName, report, moodEntries, recommendations } = data;

  // Create a new PDF document
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage();
  const { width, height } = page.getSize();
  
  // Get fonts
  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  // Title
  page.drawText('Mental Health Mirror: Weekly Wellness Report', {
    x: 50,
    y: height - 50,
    size: 24,
    font: helveticaBold,
    color: rgb(0, 0.3, 0.6)
  });
  
  // User info
  page.drawText(`For: ${userName}`, {
    x: 50,
    y: height - 90,
    size: 14,
    font: helveticaFont
  });
  
  page.drawText(`Week ${report.weekNumber}, ${report.year}`, {
    x: 50,
    y: height - 110,
    size: 12,
    font: helveticaFont
  });
  
  page.drawText(`Report Period: ${formatDate(report.startDate)} to ${formatDate(report.endDate)}`, {
    x: 50,
    y: height - 130,
    size: 12,
    font: helveticaFont
  });
  
  // Mood summary
  page.drawText('Mood Summary', {
    x: 50,
    y: height - 170,
    size: 18,
    font: helveticaBold,
    color: rgb(0, 0.5, 0.5)
  });
  
  page.drawText(`Average Mood: ${report.averageMood.toFixed(1)}/10`, {
    x: 50,
    y: height - 200,
    size: 14,
    font: helveticaFont
  });
  
  // Mood entries (up to 5)
  const moodEntriesToShow = moodEntries.slice(0, 5);
  let yOffset = height - 230;
  
  page.drawText('Recent Mood Check-ins:', {
    x: 50,
    y: yOffset,
    size: 12,
    font: helveticaBold
  });
  
  yOffset -= 20;
  moodEntriesToShow.forEach(entry => {
    page.drawText(`${formatDate(entry.date)} - ${entry.moodLabel} (${entry.moodScore}/10)`, {
      x: 70,
      y: yOffset,
      size: 10,
      font: helveticaFont
    });
    yOffset -= 15;
  });
  
  // Plant progress
  yOffset = height - 350;
  page.drawText('Growth Progress', {
    x: 50,
    y: yOffset,
    size: 18,
    font: helveticaBold,
    color: rgb(0, 0.6, 0.3)
  });
  
  yOffset -= 30;
  page.drawText(`Streak Maintained: ${report.streakMaintained ? 'Yes' : 'No'}`, {
    x: 50,
    y: yOffset,
    size: 14,
    font: helveticaFont
  });
  
  yOffset -= 20;
  page.drawText(`Plant Growth: ${report.plantProgress}%`, {
    x: 50,
    y: yOffset,
    size: 14,
    font: helveticaFont
  });
  
  // Draw a progress bar
  const barWidth = 200;
  const barHeight = 20;
  const barX = 50;
  const barY = yOffset - 30;
  
  // Draw outline
  page.drawRectangle({
    x: barX,
    y: barY,
    width: barWidth,
    height: barHeight,
    borderColor: rgb(0, 0, 0),
    borderWidth: 1
  });
  
  // Draw filled portion
  page.drawRectangle({
    x: barX,
    y: barY,
    width: (report.plantProgress / 100) * barWidth,
    height: barHeight,
    color: rgb(0, 0.7, 0.4)
  });
  
  // Recommendations
  yOffset = height - 500;
  page.drawText('Completed Activities', {
    x: 50,
    y: yOffset,
    size: 18,
    font: helveticaBold,
    color: rgb(0.6, 0.3, 0.6)
  });
  
  yOffset -= 30;
  page.drawText(`Total completed: ${report.completedRecommendations}`, {
    x: 50,
    y: yOffset,
    size: 14,
    font: helveticaFont
  });
  
  // Show completed recommendations (up to 5)
  const recsToShow = recommendations.slice(0, 5);
  yOffset -= 20;
  
  if (recsToShow.length > 0) {
    recsToShow.forEach((rec, index) => {
      if (yOffset < 100) {
        // Add new page if we're running out of space
        page = pdfDoc.addPage();
        yOffset = height - 50;
      }
      
      page.drawText(`${index + 1}. ${rec.title} (${rec.type})`, {
        x: 70,
        y: yOffset,
        size: 10,
        font: helveticaBold
      });
      yOffset -= 15;
      
      page.drawText(`   ${rec.description}`, {
        x: 70,
        y: yOffset,
        size: 8,
        font: helveticaFont
      });
      yOffset -= 20;
    });
  } else {
    page.drawText('No activities completed during this period.', {
      x: 70,
      y: yOffset,
      size: 10,
      font: helveticaFont,
      color: rgb(0.5, 0.5, 0.5)
    });
  }
  
  // Footer
  page.drawText('Generated by Mental Health Mirror', {
    x: width - 200,
    y: 30,
    size: 10,
    font: helveticaFont,
    color: rgb(0.5, 0.5, 0.5)
  });
  
  // Generate PDF bytes
  const pdfBytes = await pdfDoc.save();
  return Buffer.from(pdfBytes);
};

// Helper function to format dates
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-IN', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  });
}
